from PIL import Image

def to_bin(data):
    """Convert data to binary format as string"""
    if isinstance(data, str):
        return ''.join([format(ord(i), "08b") for i in data])
    elif isinstance(data, bytes) or isinstance(data, bytearray):
        return [format(i, "08b") for i in data]
    elif isinstance(data, int):
        return format(data, "08b")
    else:
        raise TypeError("Input type not supported")

def encode(image_path, message, output_image_path):
    """Encode a message into the image"""
    # Load the image
    image = Image.open(image_path)
    encoded = image.copy()
    width, height = image.size
    index = 0
    message += '#####'  # Add a delimiter to mark the end of the message

    binary_message = to_bin(message)
    message_length = len(binary_message)

    for row in range(height):
        for col in range(width):
            pixel = list(image.getpixel((col, row)))
            for n in range(3):  # Iterate through RGB channels
                if index < message_length:
                    pixel[n] = pixel[n] & 254 | int(binary_message[index])
                    index += 1
            encoded.putpixel((col, row), tuple(pixel))
            if index >= message_length:
                break
        if index >= message_length:
            break

    encoded.save(output_image_path)
    print("Message encoded and image saved as", output_image_path)

def decode(image_path):
    """Decode the message from the image"""
    image = Image.open(image_path)
    binary_message = ''
    for row in range(image.height):
        for col in range(image.width):
            pixel = list(image.getpixel((col, row)))
            for n in range(3):  # Iterate through RGB channels
                binary_message += str(pixel[n] & 1)

    all_bytes = [binary_message[i:i+8] for i in range(0, len(binary_message), 8)]
    decoded_message = ""
    for byte in all_bytes:
        decoded_message += chr(int(byte, 2))
        if decoded_message[-5:] == "#####":  # Check for delimiter
            break

    return decoded_message[:-5]

# Usage
input_image_path = 'input_image.png'
output_image_path = 'output_image.png'
message = "Your secret message goes here"

encode(input_image_path, message, output_image_path)
print("Decoded message:", decode(output_image_path))
